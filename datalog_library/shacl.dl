// TODO: make this entire file a soufflÃ© component?

.decl satisfied(shape:symbol)
.decl conforms(shape:symbol, node:symbol)
.decl target(shape:symbol, node:symbol)
.decl value_node(shape:symbol, node:symbol)
.decl path(node1:symbol, property:symbol, node2:symbol)

// instance is an instance of class
.decl instance_of(class:symbol, instance:symbol)
// class2 is a subclass of class1
.decl subclass(class1:symbol, class2:symbol)
// type is the datatype of node
.decl datatype(node:symbol, type:symbol)
// kind is the node kind of node (i.e. IRI, BNode, Literal, or some combination thereof)
.decl node_kind(node:symbol, kind:symbol)

// value is the value of node
.decl value(node:symbol, value:symbol)
// language is the language tag of node
.decl language(node:symbol, language:symbol)

.decl description(shape:symbol, description:symbol)
.decl severity(shape:symbol, severity:symbol)
.decl message(shape:symbol, message:symbol)
.decl deactivated(shape:symbol)
.decl node_shape(shape:symbol)
.decl property_shape(shape:symbol)
.decl property_path(shape:symbol, property:symbol)


// an instance of a subclass is also an instance of a superclass
instance_of(class, instance) :- subclass(class, subclass),
                                instance_of(subclass, instance).

// deactivated shapes are always satisfied
satisfied(shape) :- deactivated(shape).
// shapes are satisfied if there are no violated constraints
satisfied(shape) :- !( !min_count_constr(shape, _)       ;
                       !max_count_constr(shape, _)       ;
                       !not_constr(shape, _)             ;
                       !and_constr(shape)                ;
                       !or_constr(shape)                 ;
                       !xone_constr(shape)               ;
                       !equals_constr(shape, _)          ;
                       !disjoint_constr(shape, _)        ;
                       !less_than_constr(shape, _)       ;
                       !less_than_or_eq_constr(shape, _) ;
                       !property_constr(shape, _)        ;
                       !node_constr(shape, _)            ;
                       !qualified_value_constr(shape)    ;
                       !min_length_constr(shape, _)      ;
                       !max_length_constr(shape, _)      ;
                       !pattern_constr(shape, _)         ;
                       !language_in_constr(shape)        ;
                       !unique_lang_constr(shape)        ;
                       !class_constr(shape, _)           ;
                       !datatype_constr(shape, _)        ;
                       !node_kind_constr(shape, _)       ;
                       !min_exclusive_constr(shape, _)   ;
                       !min_inclusive_constr(shape, _)   ;
                       !max_exclusive_constr(shape, _)   ;
                       !max_inclusive_constr(shape, _)   ).
// a node conforms to a shape if it is a value node of the shape and the shape is satisfied
// FIXME: there's no way this is the best way to do node conformance testing
conforms(shape, node) :- value_node(shape, node), satisfied(shape).

// For node shapes the value nodes are the individual focus nodes, forming a set with exactly one member.
value_node(shape, node) :- node_shape(shape), target(shape, node).
// For property shapes with a value for sh:path p the value nodes are the set of nodes in the data graph that can be
// reached from the focus node with the path mapping of p.
value_node(shape, node) :- property_shape(shape), property_path(shape, property),
                           target(shape, n), path(n, property, node).


// CARDINALITY CONSTRAINTS

// sh:minCount specifies the minimum number of value nodes that satisfy the condition.
.decl min_count_constr(shape:symbol, n:number)
min_count_constr(shape, n) :- value_node(shape, node), c = count : { conforms(shape, node) },
                              c >= n.

// sh:minCount specifies the minimum number of value nodes that satisfy the condition.
.decl max_count_constr(shape:symbol, n:number)
max_count_constr(shape, n) :- value_node(shape, node), c = count : { conforms(shape, node) },
                              c <= n.


// LOGICAL CONSTRAINTS

// sh:not specifies the condition that each value node cannot conform to a given shape.
// This is comparable to negation and the logical "not" operator.
.decl not_constr(shape:symbol, not_shape: symbol)
not_constr(shape, not_shape) :- value_node(shape, node),
                                !conforms(not_shape, node).

// sh:and specifies the condition that each value node conforms to all provided shapes.
// This is comparable to conjunction and the logical "and" operator.
.decl and_constr(shape:symbol)
.decl and_shape(shape:symbol, and_shape:symbol)
and_constr(shape) :- value_node(shape, node),
                     !(and_shape(shape, and_shape), !conforms(and_shape, node)).

// sh:or specifies the condition that each value node conforms to at least one of the provided shapes.
// This is comparable to disjunction and the logical "or" operator.
.decl or_constr(shape:symbol)
.decl or_shape(shape:symbol, or_shape:symbol)
or_constr(shape) :- value_node(shape, node), or_shape(shape, or_shape),
                    conforms(or_shape, node).

// sh:xone specifies the condition that each value node conforms to exactly one of the provided shapes.
.decl xone_constr(shape:symbol)
.decl xone_shape(shape:symbol, xone_shape:symbol)
xone_constr(shape) :- value_node(shape, node), xone_shape(shape, xone_shape),
                      1 = count : { conforms(node, xone_shape) }.


// PROPERTY PAIR CONSTRAINTS

// sh:equals specifies the condition that the set of all value nodes is equal to the set of objects of the triples that
// have the focus node as subject and the value of sh:equals as predicate.
.decl equals_constr(shape:symbol, predicate:symbol)
equals_constr(shape, predicate) :- target(shape, fnode),
                                   !(value_node(shape, node), !path(fnode, predicate, node)),
                                   !(!value_node(shape, node), path(fnode, predicate, node)).

// sh:disjoint specifies the condition that the set of value nodes is disjoint with the set of objects of the triples
// that have the focus node as subject and the value of sh:disjoint as predicate.
.decl disjoint_constr(shape:symbol, predicate:symbol)
disjoint_constr(shape, predicate) :- target(shape, fnode), value_node(shape, node),
                                     !path(fnode, predicate, node).

// sh:lessThan specifies the condition that each value node is smaller than all the objects of the triples that have the
// focus node as subject and the value of sh:lessThan as predicate.
.decl less_than_constr(shape:symbol, predicate:symbol)
less_than_constr(shape, predicate) :- target(shape, fnode), value_node(shape, node),
                                      !(path(node, predicate, pnode), pnode < fnode).

// sh:lessThanOrEquals specifies the condition that each value node is smaller than or equal to all the objects of the
// triples that have the focus node as subject and the value of sh:lessThanOrEquals as predicate.
.decl less_than_or_eq_constr(shape:symbol, predicate:symbol)
less_than_or_eq_constr(shape, predicate) :- target(shape, fnode), value_node(shape, node),
                                            !(path(node, predicate, pnode), pnode <= fnode).


// SHAPE BASED CONSTRAINTS

// sh:property can be used to specify that each value node has a given property shape.
.decl property_constr(shape:symbol, pshape:symbol)
property_constr(shape, pshape) :- value_node(shape, fnode),
                                  conforms(pshape, fnode).

// note that the difference between these two constraints is handled by the value_node rule's handling of different
// types of shape

// sh:node specifies the condition that each value node conforms to the given node shape.
.decl node_constr(shape:symbol, nshape:symbol)
node_constr(shape, nshape) :- value_node(shape, fnode),
                              conforms(nshape, fnode).

// sh:qualifiedValueShape specifies the condition that a specified number of value nodes conforms to the given shape.
// Each sh:qualifiedValueShape can have: one value for sh:qualifiedMinCount, one value for sh:qualifiedMaxCount or,
// one value for each, at the same subject.datalog += f"max_count_constr({name}, {node_to_str(not_c)}).\n"
.decl qualified_value_constr(shape:symbol)
.decl qualified_value_shape(shape:symbol, qshape:symbol)
.decl qualified_value_disjoint(shape:symbol)
.decl qualified_min_count(shape:symbol, qshape:symbol, n:number)
.decl qualified_max_count(shape:symbol, qshape:symbol, n:number)

// min only, no disjoint
qualified_value_constr(shape) :- value_node(shape, fnode), qualified_value_shape(shape, qshape),
                                 qualified_min_count(shape, qshape, n),
                                 !qualified_value_disjoint(shape), !qualified_max_count(shape, qshape, _),
                                 c = count : { conforms(qshape, fnode) },
                                 c >= n.
// max only, no disjoint
qualified_value_constr(shape) :- value_node(shape, fnode), qualified_value_shape(shape, qshape),
                                 qualified_max_count(shape, qshape, n),
                                 !qualified_value_disjoint(shape), !qualified_min_count(shape, qshape, _),
                                 c = count : { conforms(qshape, fnode) },
                                 c <= n.
// min and max, no disjoint
qualified_value_constr(shape) :- value_node(shape, fnode), qualified_value_shape(shape, qshape),
                                 qualified_min_count(shape, qshape, min_n), qualified_max_count(shape, qshape, max_n),
                                 !qualified_value_disjoint(shape),
                                 c = count : { conforms(qshape, fnode) },
                                 c >= min_n, c <= max_n.
// min only, disjoint
qualified_value_constr(shape) :- value_node(shape, fnode),
                                 qualified_value_shape(shape, qshape1), qualified_value_shape(shape, qshape2),
                                 qshape1 != qshape2, !conforms(fnode, qshape2),
                                 qualified_min_count(shape, qshape1, n), qualified_value_disjoint(shape),
                                 !qualified_max_count(shape, qshape1, _),
                                 c = count : { conforms(qshape1, fnode) },
                                 c >= n.
// max only, disjoint
qualified_value_constr(shape) :- value_node(shape, fnode),
                                 qualified_value_shape(shape, qshape1), qualified_value_shape(shape, qshape2),
                                 qshape1 != qshape2, !conforms(fnode, qshape2),
                                 qualified_max_count(shape, qshape1, n), qualified_value_disjoint(shape),
                                 !qualified_min_count(shape, qshape1, _),
                                 c = count : { conforms(qshape1, fnode) },
                                 c <= n.
// min and max, disjoint
qualified_value_constr(shape) :- value_node(shape, fnode),
                                 qualified_value_shape(shape, qshape1), qualified_value_shape(shape, qshape2),
                                 qshape1 != qshape2, !conforms(fnode, qshape2),
                                 qualified_min_count(shape, qshape1, min_n), qualified_max_count(shape, qshape1, max_n),
                                 qualified_value_disjoint(shape),
                                 c = count : { conforms(qshape1, fnode) },
                                 c >= min_n, c <= max_n.

// STRING BASED CONSTRAINTS

// sh:minLength specifies the minimum string length of each value node that satisfies the condition.
// This can be applied to any literals and IRIs, but not to blank nodes.
.decl min_length_constr(shape:symbol, length:number)
min_length_constr(shape, length) :- value_node(shape, fnode), value(fnode, val),
                                    length <= strlen(val).

// sh:maxLength specifies the maximum string length of each value node that satisfies the condition.
// This can be applied to any literals and IRIs, but not to blank nodes.
.decl max_length_constr(shape:symbol, length:number)
max_length_constr(shape, length) :- value_node(shape, fnode), value(fnode, val),
                                    length >= strlen(val).

// sh:pattern specifies a regular expression that each value node matches to satisfy the condition.
.decl pattern_constr(shape:symbol, pattern:symbol)
.functor regex_match(pattern:symbol, string:symbol):number
pattern_constr(shape, pattern) :- value_node(shape, fnode), value(fnode, val),
                                  @regex_match(pattern, val) = 1.

// The condition specified by sh:languageIn is that the allowed language tags for each value node are limited by a given
// list of language tags.
.decl language_in_constr(shape:symbol)
.decl constr_language_tag(shape:symbol, tag:symbol)
language_in_constr(shape) :- value_node(shape, fnode), language(fnode, lang),
                             constr_language_tag(shape, lang).

// The property sh:uniqueLang can be set to true to specify that no pair of value nodes may use the same language tag.
.decl unique_lang_constr(shape:symbol)
unique_lang_constr(shape) :- value_node(shape, fnode1), value_node(shape, fnode2),
                             language(fnode1, lang1), language(fnode2, lang2),
                             !(fnode1 != fnode2, lang1 = lang2).


// VALUE CONSTRAINTS

// The condition specified by sh:class is that each value node is a SHACL instance of a given type.
.decl class_constr(shape:symbol, class:symbol)
class_constr(shape, class) :- value_node(shape, fnode),
                              instance_of(class, fnode).

// sh:datatype specifies a condition to be satisfied with regards to the datatype of each value node.
.decl datatype_constr(shape:symbol, type:symbol)
datatype_constr(shape, type) :- value_node(shape, fnode),
                                datatype(fnode, type).

// sh:nodeKind specifies a condition to be satisfied by the RDF node kind of each value node.
.decl node_kind_constr(shape:symbol, kind:symbol)
node_kind_constr(shape, kind) :- value_node(shape, fnode),
                                 node_kind(fnode, kind).

// VALUE RANGE CONSTRAINTS

// For each value node v where the SPARQL expression $minExclusive < v does not return true,
// there is a validation result with v as sh:value.
.decl min_exclusive_constr(shape:symbol, n:number)
min_exclusive_constr(shape, n) :- value_node(shape, fnode), value(fnode, val),
                                  n < val.

// For each value node v where the SPARQL expression $minInclusive <= v does not return true,
// there is a validation result with v as sh:value.
.decl min_inclusive_constr(shape:symbol, n:number)
min_inclusive_constr(shape, n) :- value_node(shape, fnode), value(fnode, val),
                                  n <= val.

// For each value node v where the SPARQL expression $maxExclusive > v does not return true,
// there is a validation result with v as sh:value.
.decl max_exclusive_constr(shape:symbol, n:number)
max_exclusive_constr(shape, n) :- value_node(shape, fnode), value(fnode, val),
                                  n > val.

// For each value node v where the SPARQL expression $maxInclusive >= v does not return true,
// there is a validation result with v as sh:value.
.decl max_inclusive_constr(shape:symbol, n:number)
max_inclusive_constr(shape, n) :- value_node(shape, fnode), value(fnode, val),
                                  n >= val.
